library ieee;
use ieee.std_logic_1164.all;

entity test_game1 is
	port (
		clk,reset,react : in std_logic;
		led: out std_logic
		);
end entity test_game1;
architecture core of test_game1 is
component up_counter is
	Generic (CLK_BIT : INTEGER := 3);
	port (
    	clk,reset,start  : in std_logic;
	 	count_to : std_logic_vector(CLK_BIT downto 0);
	 	done: out std_logic
  );
end component up_counter;

component rand_gen is
	port (
    trigger, clk: in std_logic;
   rand: out unsigned(3 downto 0)
  );
end component rand_gen;

type RtlState is (init, led_off, led_on);
signal rtl_state: RtlState;
signal start_c1,start_c2,rst_c1,rst_c2: std_logic;

begin
xrand : rand_gen port map(trigger=>(reset or react), clk=>clk, rand=>rand);
process(clk,reset,react,led)
variable next_rtl_state: RtlState;
variable reset_c1,reset_c1,str_c1,str_c2: std_logic; 
begin
	--if (clk'event and clk = '1') then
 --   	if (reset = '1' ) then
 --   		rtl_state <= init;
 --     	else
 --       	rtl_state <= next_rtl_state;
 --   	end if;
 -- 	end if;
	case rtl_state is
		when init=>
		reset_c1 := '1';
		reset_c2 := '1';
            if(reset = '1') then 
             	reset_c1 := '0'
             	start_c1 := '1'
				next_rtl_state := led_off;
			end if;
      	when led_off=> 
          if (count = count_upto) then
				 next_rtl_state := rst;
				 done_var := '1';
          else 
            next_rtl_state := incr;
            next_count_var := next_count_var + 1;
          end if;
        when led_on=>

	end case;

end process
end architecture core;