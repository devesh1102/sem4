library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity counter3 is
port (
		clk,reset,start: in std_logic;
		count_out : out unsigned (10 downto 0)
	);	
end entity counter3;

architecture Behave of counter3 is


--begin

	
-- reset and clock are assumed to
-- be ports or signals declared here.
-- first define some types..
type RtlState is (rst,incr);
signal rtl_state: RtlState;
signal count: unsigned (10 downto 0);
-- input start coded as a single bit.

-- output done coded as a single bit.

-- signal declaration for register.
-- (note: The unsigned type is a vector of
--    std-logic for which add/sub/mul/div
--    functions are defined).
--signal count: unsigned (10 downto 0);
-- a useful constant.
constant Z10 : unsigned(10 downto 0):=(others =>'1');
begin

--f1: twocounter port map (clk_in,clk);
	--f2: game port map (clk_in,reset,react,time_binary,led);
	
-- the process description of the RTL
process (clk, reset, rtl_state, start,count)
variable next_rtl_state: RtlState;
--variable count : unsigned (10 downto 0);
variable next_count_var: unsigned (10 downto 0);
--variable done_var: std_logic;
begin
-- initialize the variables
next_rtl_state := rtl_state;
--next_count_var := count;
next_count_var:=count;
--done_var :='0';
case rtl_state is
	when rst =>
		
		if (start = '1') then
		next_rtl_state := incr;
	next_count_var :=(others => '0');
		end if;
	when incr =>
		if (count = Z10) then
		next_rtl_state := rst;
		--done_var := '1';
		else
		next_rtl_state := incr;
		next_count_var:= count + 1;
		end if;
end case;
--done <= done_var;

if (clk'event and clk = '1') then
	if (reset = '1') then
		--count_out<=(others => '0');
		rtl_state <= rst;
	else
		rtl_state <= next_rtl_state;
	end if;
	count <= next_count_var;
	count_out<= count;
	
end if;
end process;
end Behave;
