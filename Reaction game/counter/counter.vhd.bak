library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
architecture Behave of counter is
   -- reset and clock are assumed to
   -- be ports or signals declared here.
   -- first define some types..
   type RtlState is {rst, decr};
   signal rtl_state: RtlState;
   -- input start coded as a single bit.
   signal start: std_logic;
   -- output done coded as a single bit.
   signal done: std_logic;
   -- signal declaration for register.
   -- (note: The unsigned type is a vector of
   --    std-logic for which add/sub/mul/div
   --    functions are defined).
   signal count: unsigned (9 downto 0);
   -- a useful constant.
   constant Z9 : unsigned (9 downto 0) := (others => ’0’);
begin
   -- the process description of the RTL
   process(clk, reset, rtl_state, start, count)
  variable next_rtl_state_var: RtlState;
  variable next_count_var: unsigned (9 downto 0);
  variable done_var: std_logic;
begin
  next_rtl_state := rtl_state;
  next_count_var := count;
  done_var := ’0’;
  case rtl_state is
      when rst =>
          if (start = ’1’) then
             next_rtl_state := decr;
             next_count_var := (others => ’1’);
  end if;
      when decr => 
          if (count = Z9) then
              next_rtl_state := rst;
              done_var := ’1’;
          else 
            count = count-1;
          end if;
end case;
  done <= done_var;
  if (clk’event and clk = ’1’) then
      if (reset = ’1’) then
         rtl_state <= rst;
      else
         rtl_state <= next_rtl_state_var;
      end if;
      count <= next_count_var;
  end if;
   end process;
end Behave;